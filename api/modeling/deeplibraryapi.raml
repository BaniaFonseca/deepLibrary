#%RAML 1.0
title: DeepLibrary API
baseUri: http://api.deeplibrary.io/{version}
version: v1
protocols: [HTTP, HTTPS]

traits:
  secured:
    usage: Apply this to any method that needs to be secured
    description: most requests require authentication.
    headers:
      Authorization:
        displayName: Authorization
        description: "The access token provided by the authentication application"
        type: string
        required: true
        example: "Token 9af36176dddf7673d5e7de6c00860d580bbf0670"

resourceTypes:
  collection:
    is: [secured]
    usage: This resourceType should be used for any collection of items
    description: Collection of available <<resourcePathName>>
    get:
      description: Get a list of <<resourcePathName>> based on the title.
      responses:
        200:
          body:
            application/json:
    post:
      description: Add a new <<resourcePathName | !singularize>>
      body:
        application/json:
          type: <<resourcePathName | !singularize | !uppercamelcase>>
      responses:
        200:
          body:
            application/json:
              type: Message
              example:
                message: "The <<resourcePathName | !singularize>> has been properly entered"
  collection-item:
    is: [secured]
    usage: This resourceType should be used for any item
    description: A <<resourcePathName | !singularize | !uppercamelcase>> entity
    get:
      description: Get details of <<resourcePathName | !singularize>>
      responses:
        200:
          body:
            application/json:
              type: <<resourcePathName | !singularize | !uppercamelcase>>
    put:
      description: Update details of <<resourcePathName | !singularize>>
      body: 
        application/json:
          type: <<resourcePathName | !singularize | !uppercamelcase>>
types:
  Message:
    properties:
      message:
        type: string
        required: true
  Page:
    properties:
      pageNumber:
        type: integer
        required: true
  DigitaldDocument:
    properties:
      numberOfPages:
        type: integer
      title:
        type: string
      year:
        type: integer
      country:
        type: string
      city:
        type: string
      authors:
        type: string[]
  Book:
    type: DigitaldDocument
    properties:
      isbn:
        type: string
      publisher:
        type: string
      preface:
        type: string
      volume:
        type: integer
      edition:
          type: integer
      language:
        type: string
/books:
  type: collection
  get:
  post:
  /{bookId}:
    type: collection-item
    get:
    put:
    /pages:
      description: Collection Of Pages Of The Book With 'id = {bookId}'
      post:
        description: Add new Page to the Book With 'id = {bookId}
        body:
          application/json:
            type: Page
        responses:
          200:
            body:
              application/json:
                type: Message
                example:
                  message: "The page has been succefully added"
      /{pageNumber}:
        description: The Page to be streamed to the client
        get:
          description: Get The Content Of The Page With 'number = {pageNumber}'
          responses:
            200:
              body:
                application/pdf:
                  example: !include 5f390b30ea0e67ac51555b321.pdf
